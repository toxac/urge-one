---
/**
 * @description concept detail page (protected)
 * @file /program/concepts/[slug]/index.astro
 * @param slug
 * @author amitchanchal
 * @updated August 27, 2025
 */
import DashLayout from "../../../../layouts/DashLayout.astro";
import { render, getEntry, type CollectionEntry } from "astro:content";
import MDContainer from "../../../../components/content/MDContainer.astro";
import ContentInitializer from "../../../../components/program/progress/ContentInitializer";
import ContentNavigationButtons from "../../../../components/program/progress/ContentNavigationButtons";
import ContentProgressStatus from "../../../../components/program/progress/ContentProgressStatus";
import ContentAction from "src/components/user/actions/ContentActions";

import { hasAccess, accessProfiles } from "../../../../lib/rbac";
const { userRoles, session } = Astro.locals;

// Authentication Check
const isAuthenticated: boolean = session !== null;
// Access Check
const hasPageAccess: boolean = hasAccess(userRoles, [2, 5, 7]);

// redirect if doesnt have access
if (!isAuthenticated || !hasPageAccess) {
  return Astro.redirect("/program");
}

// Get the slug from the incoming server request
const pathname: string = Astro.url.pathname;
const { slug } = Astro.params;
if (slug === undefined) {
  return Astro.redirect("/404");
}

const concept = await getEntry("concepts", slug);

if (concept === undefined) {
  return Astro.redirect("/404");
}

const { Content } = await render(concept);

// Related Content
const currentMilestone = await getEntry(concept.data.milestone);

const breadcrumbs = [
  { name: "Home", url: "/" },
  { name: "Program", url: "/program" },
  {
    name: `Milestone-${currentMilestone?.data.sequence}`,
    url: `/program/milestones/${currentMilestone?.slug}`,
  },
  {
    name: `Concept-${concept.data.title}`,
    url: `program/concepts/${concept.slug}`,
  },
];
---

<DashLayout
  title={`Concept - ${concept.data.title} | urge`}
  description={concept.data?.description || concept.data.title}
  breadcrumbItems={breadcrumbs}
>
  <ContentInitializer contentMetaId={concept.data.contentMetaId} client:load />

  <div class="w-full flex justify-between items-center mb-8">
    <div class="p-2 h-full bg-white flex gap-1 items-center shadow-md rounded-md">
      <ContentProgressStatus
        contentId={concept.data.contentMetaId}
        client:load
      />
    </div>
    <div class="flex gap-2">
      {
      session != null && session.user.id ? (
        <ContentAction
          contentType={concept.collection}
          referenceTable={"content_meta"}
          referenceUrl={pathname}
          relatedContentId={concept.data.contentMetaId}
          userId={session?.user.id}
          client:load
        />
      ) : null
    }
    </div>
  </div>

  <h1 class="mb-8">{concept.data.title}</h1>


  <MDContainer>
    <Content />
  </MDContainer>

  <ContentNavigationButtons
    contentType={concept.collection}
    nextContentId={concept.data.next?.id}
    previousContentId={concept.data.previous?.id}
    nextContentType={concept.data.next?.type}
    previousContentType={concept.data.previous?.type}
    contentMetaId={concept.data.contentMetaId}
    client:load
  />
</DashLayout>
