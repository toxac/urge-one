---
/**
 * @description exercise list page (protected)
 * @file /src/pages/program/exercises/index.astro
 * @param _props
 * @author amitchanchal
 * @version 1.2
 * @updated may 27, 2025
 */
import DashLayout from "@layouts/DashLayout.astro";
import { render, getEntry, type CollectionEntry } from "astro:content";
import MDContainer from "@components/content/MDContainer.astro";
import ContentInitializer from "@components/program/progress/ContentInitializer";
import ContentNavigationButtons from "@components/program/progress/ContentNavigationButtons";
import ContentProgressStatus from "@components/program/progress/ContentProgressStatus";
import AddNote from "@components/user/actions/AddNote";
import PostQuestion from "@components/user/actions/PostQuestion";
import SaveBookmark from "@components/user/actions/SaveBookmark";
import SpeechBar from "@components/content/SpeechBar.astro";
import ActionBar from "@components/content/ActionBar.astro";
import { hasAccess, accessProfiles } from "@lib/rbac";

const { userRoles, session } = Astro.locals;

// Authentication Check
const isAuthenticated: boolean = session !== null;
// Access Check
const hasPageAccess: boolean = hasAccess(
  userRoles,
  accessProfiles.programStart
);

// redirect if doesnt have access
if (!isAuthenticated || !hasPageAccess) {
  return Astro.redirect("/start");
}

type Exercise = CollectionEntry<"exercises">;

// get the slug from incoming server request
const pathname: string = Astro.url.pathname;
const { slug } = Astro.params;
if (slug === undefined) {
  return Astro.redirect("/404");
}

// get the milestone entry
const exercise = await getEntry("exercises", slug);

if (exercise === undefined) {
  return Astro.redirect("/404");
}

const { Content } = await render(exercise);

// get Parent Milestone
const parentMilestone = await getEntry(exercise.data.milestone);
const relatedConcept = await getEntry(exercise.data.concept);

// Breadcrumbs data
const breadcrumbs = [
  { name: "Home", url: "/" },
  { name: "Program", url: "/program" },
  {
    name: `Milestone ${parentMilestone.data.sequence}`,
    url: `/program/milestone/${parentMilestone.slug}`,
  },
  {
    name: `Exercise - ${exercise.data.title}`,
    url: `/program/exercises/${exercise.slug}`,
  },
];
---

<DashLayout
  title={`exercise - ${exercise.data.title} | urge`}
  description={exercise.data?.description || exercise.data.title}
  breadcrumbItems={breadcrumbs}
>
  <ActionBar>
    <div class="bg-white p-2 rounded-lg shadow-md border border-gray-200">
      <ContentInitializer
        contentMetaId={exercise.data.contentMetaId}
        client:load
      />
      <ContentProgressStatus
        contentId={exercise.data.contentMetaId}
        client:load
      />
    </div>

    {
      session != null && session.user.id ? (
        <div class="flex gap-4">
          <PostQuestion
            contentType={exercise.collection}
            referenceTable={"content_meta"}
            referenceUrl={pathname}
            relatedContentId={exercise.data.contentMetaId}
            userId={session?.user.id}
            client:load
          />
          <AddNote
            contentType={exercise.collection}
            referenceTable={"content_meta"}
            referenceUrl={pathname}
            relatedContentId={exercise.data.contentMetaId}
            userId={session?.user.id}
            client:load
          />
          <SaveBookmark
            contentType={exercise.collection}
            referenceTable={"content_meta"}
            referenceUrl={pathname}
            relatedContentId={exercise.data.contentMetaId}
            userId={session?.user.id}
            client:load
          />
        </div>
      ) : null
    }
  </ActionBar>

  <h1>{exercise.data.title}</h1>
  <SpeechBar>Speed controls</SpeechBar>

  <MDContainer>
    <Content />
  </MDContainer>
  <ContentNavigationButtons
    contentType={exercise.collection}
    nextContentId={exercise.data.next?.id}
    previousContentId={exercise.data.previous?.id}
    nextContentType={exercise.data.next?.type}
    previousContentType={exercise.data.previous?.type}
    contentMetaId={exercise.data.contentMetaId}
    client:load
  />
</DashLayout>
